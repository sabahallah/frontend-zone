.header {
    height: 85vh;
    background-image: linear-gradient(to right bottom, rgba($color-primary-light, 0.8), rgba($color-primary-dark, 0.801)), 
    /* for responsive images, in normal situations that is enough. in case it is not a high screen resolution */
    url(../img/hero-small.jpg);
    // rgba($color-primary-dark, 0.801)) this will work only in sass
    background-size: cover;
    background-position: top; /* it ensures whatever the viewport size, image will always at top of the container */    

    // only if the clip-path supported do this logic
    // in this case only we need the height to be 95vh
    @supports (clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)) {
        /* specify a polygon in which the image or the element will still be visible */
        /* nice website you can use, www.bennettfeely.com/clippy/ */
        clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); /*75vh means 75 percent of the viewport hieght */
        -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
        height: 95vh;
    }

    /* for media queries */

    /* responsive images in css
        dpi (dot per inch)
        192 because this the resolution of apple retina screen 
        if resolution is higher than 192 (we have 2x screen - DPR:2.0) then show the big image (../img/hero.jpg)
        
        and (min-width: 600px) >> because in the mobile view (which is less than 600) almost the density is 2x 
        so no need to download high resolution image
        
        $color-secondary-light  instead of $color-primary-light for testing purpose
    */
    @media only screen and (min-resolution: 192dpi) and (min-width: 37.5em), //600px/16px=37.5em
    // comma here is like OR

    // this is for safari because min-resolution not supported
    // 2 means 2x
    only screen and (-webkit-min-device-pixel-ratio: 2) and (min-width: 37.5em),

    // if the screen size is more than 2000px download the big image
    only screen and (min-width: 125em){ //2000px/16px=125em
        background-image: linear-gradient(to right bottom, rgba($color-secondary-light, 0.8), rgba($color-secondary-dark, 0.801)), 
        url(../img/hero.jpg);
    }
   

    @include respond(phone){
        clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%); /*75vh means 75 percent of the viewport hieght */
        -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
    }

    /* we making parent relative because, we need to position the child .log-box */
    position: relative;

    &__logo-box { // & will generate a .header__logo-box selector 
        position: absolute;
        top: 4rem;
        left: 4rem;
    }

    &__logo {
        height: 3.5rem;
     }
     
    &__text-box {
         position: absolute;
         top: 40%;  /* relation to the parent element */
         left: 50%; /* relation to the parent element */
         transform: translate(-50%, -50%); /* relation to the element itself */
     
         text-align: center; /* to centre the button inside*/
     }
}

.header__logo {
    height: 3.5rem;
 }
 
 .header__text-box {
     position: absolute;
     top: 40%;  /* relation to the parent element */
     left: 50%; /* relation to the parent element */
     transform: translate(-50%, -50%); /* relation to the element itself */
 
     text-align: center; /* to centre the button inside*/
 }
 