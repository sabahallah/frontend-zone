/*
These breakoints coming from most popular devices 2017-2018, we grouped them together.

0 - 600px:      Phone
600 - 900px:    Tablet portrait
900 - 1200px:   Tablet landscape
[1200 - 1800] is where our normal styles apply
1800px + :      Big desktop

$breakpoint arguement choices:
- phone
- tab-port
- tab-land
- big-desktop

em and rem (in media queries) are not affected by root font-size setting which is >> html { font-size: 62.5%; }
which means 1em or 1rem (in media queries) is equal to the font size coming from the browser itself which is by default 16px.
but if the user changed the font-size to 20px so it will be 20px no matter what is in base font definition which is >> html { font-size: 62.5%; }
so we're going to use em not rem, because rem failed to work as intended in some of the browsers 
so em is the best option to use in media query here

1em = 16px

ORDER : 
    - BASE AND TYPOGRAPHY
    - GERNERAL LAYOUT (HEADER, FOOTER, NAVIGATION...) + GRID
    - PAGE LAYOUT
    - COMPONENTS
*/
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
  /* By default this property is not inherited, but by setting value to inherit,
    all child elements will inherit it, see bady element */
}

html {
  /* this is to define what 1rem is */
  font-size: 62.5%;
  /*
    default font-size by browser is 16 px (or any changed by user)
    we want it to be 10 px
    (10/16*100) = 62.5
    We are converting font-size to % of the given width given by the browser 
    
    so if user change font-size to:
    22 px: 62.5 * 22 / 100 = 13.75px 
    20 px: 62.5 * 20 / 100 = 12.5px
    rem is not supported by IE 9 and below
    This is to make our life easy, that's it. so 1 rem = 10 px so all following calculations later will be easy for us */
  /* for media query */
  /* no need for phone media query here (to change the font-size) because second media query (tab-port) will be applied
    imagine we have width = 500px
    phone width is less than 600px and tab-port width also is less than 900px so the last one in the file 
    which is tab-port will be applied */
  /* this should be after the tab-land because of the same reason; last media query will always apply 
    imagine we have width=800px 
    tab-port width is less than 900px and tab-land width is also less than 1200px so the last one in the file will be applied
    if tab-land is coming after tab-port in the file so all width less than 1200px will have font-size: 56.25% which is not correct */
  scroll-behavior: smooth;
}
@media only screen and (max-width: 75em) {
  html {
    font-size: 56.25%;
  }
}
@media only screen and (max-width: 56.25em) {
  html {
    font-size: 50%;
  }
}
@media only screen and (min-width: 112.5em) {
  html {
    font-size: 75%;
  }
}

body {
  box-sizing: border-box;
  padding: 3rem;
}
@media only screen and (max-width: 56.25em) {
  body {
    padding: 0;
  }
}

::selection {
  background-color: #55c57a;
  color: #fff;
}

/* two ways to apply animation
    - using transition property and change the property you like
    - keyframe - advanced */
@keyframes moveInLeft {
  /* when animation starts */
  0% {
    opacity: 0;
    /* we want to translate to the x-direction */
    transform: translateX(-10rem);
  }
  /* 60% {
            transform: rotate(120deg);
            transform: translateX(-100px) rotate(120deg);
        } */
  80% {
    transform: translateX(1rem);
  }
  /* when animation ends */
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  /* when animation starts */
  0% {
    opacity: 0;
    /* we want to translate to the x-direction */
    transform: translateX(10rem);
  }
  80% {
    transform: translateX(-1rem);
  }
  /* when animation ends */
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

/* this is to make the button move from down to up when loading the page */
@keyframes moveInButton {
  /* when animation starts */
  0% {
    opacity: 0;
    /* we want to translate to the x-direction */
    transform: translateY(30px);
  }
  /* when animation ends */
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

body {
  font-family: "Lato", sans-serif, serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  /* means 1.7 times bigger than the predefined line height */
  color: #777;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* sometimes when animation is running, it is shaking to upperside and no one knows why
        so this property for it */
  backface-visibility: hidden;
  margin-bottom: 6rem;
}
.heading-primary--main {
  display: block;
  font-size: 6rem;
  /* by default h1 has the higher font-weight, so we need to reduce it */
  font-weight: 400;
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* it will start faster then slow down */
  /* animation-delay: 3s;  /* it will wait for 3s then start animating */
  /* animation-iteration-count: 3; /* 3: will happen 3 times */
  /* for media queries*/
}
@media only screen and (max-width: 37.5em) {
  .heading-primary--main {
    letter-spacing: 1rem;
    font-size: 5rem;
  }
}
.heading-primary--sub {
  display: block;
  font-size: 2rem;
  /* by default h1 has the higher font-weight, so we need to reduce it */
  font-weight: 700;
  letter-spacing: 1.75rem;
  /* another way for animation instead of writing all the properties */
  animation: moveInRight 1s ease-out;
  /* for media queries*/
}
@media only screen and (max-width: 37.5em) {
  .heading-primary--sub {
    letter-spacing: 0.5rem;
  }
}

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  display: inline-block;
  /* background image will be only visible in the text area. and color should be transparent */
  -webkit-background-clip: text;
  color: transparent;
  /* and we want to make the text transparent */
  letter-spacing: 0.2rem;
  transition: all 0.2s;
  /* for media queries*/
}
.heading-secondary:hover {
  transform: skewY(2deg) skewX(15deg) scale(1.1);
  text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2);
}
@media only screen and (max-width: 56.25em) {
  .heading-secondary {
    font-size: 3rem;
  }
}
@media only screen and (max-width: 37.5em) {
  .heading-secondary {
    font-size: 2rem;
  }
}

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase;
}

.paragraph {
  font-size: 1.6rem;
}
.paragraph:not(:last-child) {
  margin-bottom: 3rem;
}

.u-center-text {
  /* this is a block element, so if we put text-align: center and the child is inline-block it will be centered automatically */
  text-align: center !important;
}

.u-margin-bottom-big {
  margin-bottom: 8rem !important;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .u-margin-bottom-big {
    margin-bottom: 5rem !important;
  }
}

.u-margin-bottom-medium {
  margin-bottom: 4rem !important;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .u-margin-bottom-medium {
    margin-bottom: 3rem !important;
  }
}

.u-margin-bottom-small {
  margin-bottom: 1.5rem !important;
}
@media only screen and (max-width: 37.5em) {
  .u-margin-bottom-small {
    margin-bottom: 1rem !important;
  }
}

.u-margin-top-big {
  margin-bottom: 8rem !important;
}

.u-margin-top-huge {
  margin-bottom: 10rem !important;
}

.card {
  /*  prespective to make nice natural effect when the card rotate 
        prespective has to be on the parent of the item which tranform occurs */
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  /* We put the height: 52rem because of the child height is 52rem
       Issue happens because we took the cards out of thier natural flow via the absolute positioning,
       it is like floating, so parent height will collpase to 0 and lost its height, so you need to add something like
       clearfix but for absolute positioning we don't have; so we'll have to set the height to the same child height 
       
       to make the front side the same size as the back side */
  height: 52rem;
  /* for media queries */
}
.card__side {
  height: 52rem;
  transition: all 0.8s ease;
  /* ease is a timing animation function */
  /* to put the two cards on top of each other */
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  /* hide the back part of an element */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  border-radius: 3px;
  overflow: hidden;
  /* because the card image is overflown */
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
}
.card__side--front {
  background-color: #fff;
}
.card__side--back {
  /* before we hover the card this back is already flipped */
  transform: rotateY(180deg);
}
.card__side--back-1 {
  background-image: linear-gradient(to right bottom, #ffb900, #ff7730);
}
.card__side--back-2 {
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485);
}
.card__side--back-3 {
  background-image: linear-gradient(to right bottom, #2998ff, #5643fa);
}
.card:hover .card__side--front {
  transform: rotateY(-180deg);
}
.card:hover .card__side--back {
  /* wehen hover the back side flip it back to 0 degree */
  transform: rotateY(0);
}
.card__picture {
  background-size: cover;
  height: 23rem;
  background-blend-mode: screen;
  clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
  /* sometimes the overflow: hidden; doesn't work with clip path so we have to set the border radius manually */
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
}
.card__picture--1 {
  background-image: linear-gradient(to right bottom, #ffb900, #ff7730),
    url(../img/nat-5.jpg);
}
.card__picture--2 {
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485),
    url(../img/nat-6.jpg);
}
.card__picture--3 {
  background-image: linear-gradient(to right bottom, #2998ff, #5643fa),
    url(../img/nat-7.jpg);
}
.card__heading {
  font-size: 2.8rem;
  font-weight: 300;
  text-transform: uppercase;
  text-align: right;
  color: #fff;
  position: absolute;
  top: 12rem;
  right: 2rem;
  width: 70%;
}
.card__heading-span {
  padding: 1rem 1.5rem;
  /* to break a box, clone; it will create complete two different entities
        clone; will apply all the declerations we have to each box */
  -webkit-box-decoration-break: clone;
  /* for google chrome*/
  box-decoration-break: clone;
}
.card__heading-span--1 {
  background-image: linear-gradient(
    to right bottom,
    rgba(255, 185, 0, 0.85),
    rgba(255, 119, 48, 0.85)
  );
}
.card__heading-span--2 {
  background-image: linear-gradient(
    to right bottom,
    rgba(126, 213, 111, 0.85),
    rgba(40, 180, 133, 0.85)
  );
}
.card__heading-span--3 {
  background-image: linear-gradient(
    to right bottom,
    rgba(41, 152, 255, 0.85),
    rgba(86, 67, 250, 0.85)
  );
}
.card__details {
  padding: 3rem;
}
.card__details ul {
  list-style: none;
  width: 80%;
  /* to be centred in the container 
               center a block element inside a block element */
  margin: 0 auto;
}
.card__details ul li {
  text-align: center;
  font-size: 1.5rem;
  padding: 1rem;
}
.card__details ul li:not(:last-child) {
  border-bottom: 1px solid #eee;
}
.card__cta {
  position: absolute;
  /* to center the element */
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 90%;
  text-align: center;
}
.card__price-box {
  text-align: center;
  color: #fff;
  margin-bottom: 8rem;
}
.card__price-only {
  font-size: 1.4rem;
  text-transform: uppercase;
}
.card__price-value {
  font-size: 6rem;
  font-weight: 100;
}
@media only screen and (max-width: 56.25em), only screen and (hover: none) {
  .card {
    height: auto;
    border-radius: 3px;
    background-color: #fff;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  }
  .card__side {
    height: auto;
    /* now we don't have two sides occupying the same space */
    position: relative;
    box-shadow: none;
  }
  .card__side--back {
    /* now we don't want the back side card to rotate */
    transform: rotateY(0);
    clip-path: polygon(0 15%, 100% 0, 100% 100%, 0% 100%);
  }
  .card:hover .card__side--front {
    transform: rotateY(0);
  }
  .card__details {
    padding: 1rem 3rem;
  }
  .card__cta {
    position: relative;
    top: 0%;
    left: 0;
    transform: translate(0);
    width: 100%;
    padding: 7rem 4rem 4rem 4rem;
  }
  .card__price-box {
    margin-bottom: 3rem;
  }
  .card__price-value {
    font-size: 4rem;
  }
}

.btn {
  /* using pesudo elements 
    we will create a content and put it behind the current button,
    then if we hover over the button the content will scale and fade out */
}
.btn,
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  font-size: 1.6rem;
  padding: 1.5rem 4rem;
  display: inline-block;
  /* this button is inline-block so we can treat it as a text 
        so we set .header__text-box {text-align: centre; } */
  border-radius: 10rem;
  transition: all 0.2s;
  /* if we don't want to specify a property we can set 'all'
        The normal use is transition: transform .2s; 
        In order to the animation to work, the transition property should be on the initial state */
  /* this is for the child pesudo element */
  position: relative;
  border: none;
  cursor: pointer;
}
.btn:hover {
  transform: translateY(-3px);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}
.btn:hover::after {
  /* when hovering over a btn then make some action to the ::after content
            we already defined the ::after content below, so we just need to scale it bigger
            also we added a transition property to the initial state .btn::after */
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
  /* for fading element out */
}
.btn:active,
.btn:focus {
  /* for <button> element to remove the outline when we click the button */
  outline: none;
  /* when you click a button */
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
}
.btn--white {
  background-color: #fff;
  color: #777;
}
.btn--white::after {
  background-color: #fff;
}
.btn--green {
  background-color: #55c57a;
  color: #fff;
}
.btn--green::after {
  background-color: #55c57a;
}
.btn--margin-top {
  margin-top: 2rem;
}
.btn::after {
  /* this will be like a child of the button but behind it */
  content: "";
  display: inline-block;
  height: 100%;
  /* 100% of parent button height */
  width: 100%;
  /* 100% of parent button width */
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  /* define position of the element if one on top of another, -1 so it will be behind the current element */
  transition: all 0.4s;
}
.btn--animated {
  animation: moveInButton 0.5s ease-out 0.75s;
  /* .75s is the delay time before start */
  /* automatically apply the properties defined in 0% { } before even the animation starts */
  animation-fill-mode: backwards;
}

.btn-text:link,
.btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  transition: all 0.2s;
}

.btn-text:hover {
  background-color: #55c57a;
  color: #fff;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px);
}

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
  transform: translateY(2px);
}

.composition {
  position: relative;
  /* select all the images which is not hovered */
  /* this will be transformed to .composition:hover .composition__photo:not(:hover) {} */
}
.composition__photo {
  width: 55%;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
  border-radius: 2px;
  position: absolute;
  z-index: 10;
  transition: all 0.2s;
  outline-offset: 2rem;
  /* transparent area outside the image */
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .composition__photo {
    float: left;
    position: relative;
    width: 33.33333333%;
    box-shadow: 0 1.5rem 3rem rgba(0, 0, 0, 0.2);
  }
}
.composition__photo--p1 {
  top: -2rem;
  /* will go up 20px*/
  left: 0;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .composition__photo--p1 {
    top: 0;
    transform: scale(1.2);
  }
}
.composition__photo--p2 {
  top: 2rem;
  /* will go down 20px*/
  right: 0;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .composition__photo--p2 {
    top: -1rem;
    transform: scale(1.3);
    z-index: 100;
  }
}
.composition__photo--p3 {
  top: 10rem;
  /* will go down 20px*/
  left: 20%;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .composition__photo--p3 {
    top: 1rem;
    left: 0;
    transform: scale(1.1);
  }
}
.composition__photo:hover {
  transform: scale(1.05) translateY(-0.5rem);
  box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.5);
  z-index: 20;
  /* to make the image overlay of the others it should have higher z-index */
  /* it is like a boarder, but with outline we can use outline-offset porperty. check above. */
  outline: 1.5rem solid #55c57a;
}
.composition:hover .composition__photo:not(:hover) {
  transform: scale(0.95);
}

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform 0.3s;
  cursor: pointer;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .feature-box {
    padding: 2rem;
  }
}
.feature-box__icon {
  font-size: 6rem;
  margin-bottom: 0.5rem;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  /* background image will be only visible in the text area. and color should be transparent */
  -webkit-background-clip: text;
  color: transparent;
  /* and we want to make the text transparent */
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .feature-box__icon {
    margin-bottom: 0;
  }
}
.feature-box:hover {
  transform: translateY(-1.5rem) scale(1.03);
}

.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(0, 0, 0, 0.1);
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: 1.6rem;
  /* skew the shap */
  transform: skewX(-12deg);
  /* skew the direct child the other direction but this will not work; because we have another transform in th __shape
    which is taking precedence 
    so the solution for this is to add skewX on all direct childs manually */
  /* for media queries */
  /* when we hover over the story, the caption will move from bottom to top */
  /* when we hover over the story, the image will be blured and zoomed out  */
}
@media only screen and (max-width: 56.25em) {
  .story {
    width: 100%;
    padding: 4rem;
    padding-left: 7rem;
  }
}
@media only screen and (max-width: 37.5em) {
  .story {
    /* revert skewing back to 0 */
    transform: skewX(0);
  }
}
.story__shape {
  width: 15rem;
  height: 15rem;
  float: left;
  border-radius: 50%;
  overflow: hidden;
  transform: translateX(-3rem) skewX(12deg);
  position: relative;
  /* for media queries */
}
@supports (clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)) {
  .story__shape {
    /* shape-outside will make the content flows around the element */
    /* radius of the circle, and position of the centered of the circle
            50% it will be half the width and height of the element, so it will be 7.5rem
            at 50% 50% >> this is the center of the circle, centered horizontally and vertically 
            in order this to work, other elements should be floated and has a height and width */
    -webkit-shape-outside: circle(50% at 50% 50%);
    shape-outside: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
    border-radius: none;
  }
}
@media only screen and (max-width: 37.5em) {
  .story__shape {
    /* revert skewing back to 0 */
    transform: translateX(-3rem) skewX(0);
  }
}
.story__img {
  height: 100%;
  /* 100% of the parent */
  transform: translateX(-4rem) scale(1.4);
  /* because this is the initial state, when we hover over the story the image will be blured and zoomed out */
  transition: all 0.5s;
}
.story__text {
  transform: skewX(12deg);
  /* for media queries */
}
@media only screen and (max-width: 37.5em) {
  .story__text {
    /* revert skewing back to 0 */
    transform: skewX(0);
  }
}
.story__caption {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, 20%);
  color: #fff;
  text-transform: uppercase;
  font-size: 1.7rem;
  text-align: center;
  /* initial state before hovering over the elemnt */
  opacity: 0;
  transition: all 0.5s;
  /* to fix small glitch, when we hove over story, it will move up and a little to the right,
        and if something weired happens */
  backface-visibility: hidden;
}
.story:hover .story__caption {
  opacity: 1;
  transform: translate(-50%, -50%);
}
.story:hover .story__img {
  transform: translateX(-4rem) scale(1);
  /* this will add filter to the image.
        */
  filter: blur(3px) brightness(80%);
  /* brightness value under 100% >>> darker; and value over 100% >>> brighter */
}

.bg-video {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: -1;
  opacity: 0.15;
  overflow: hidden;
}
.bg-video__content {
  height: 100%;
  width: 100%;
  object-fit: cover;
  /* similar to background-size: cover and it will maintain the aspect ratio 
        but you need to clear the sides overflow in parent*/
}

.form {
  /* HINT: To make a nice effect. When the placeholder is shown, we want the label to be hidden once we start writing it will be visible 
            + (the sibling selector) because input and label elements are adjacent siblings, having the same parent
            if they are not adjacent selectors like <label> <div> <input> we will use (~ the general sibling selector) instead of + 
            be carful and check the order in HTML <input> element is before <label> element */
  /*
     HINT: We will select the label element first (sibling) then we'll select its child 
            in this case ~ & + is the same effect */
}
.form__group:not(:last-child) {
  margin-bottom: 2rem;
}
.form__input {
  font-size: 1.5rem;
  font-family: inherit;
  /* HINT: because browser sets default font-family */
  color: inherit;
  /* HINT: If i didn't add this, browser sets default color which black */
  padding: 1.5rem 2rem;
  border-radius: 2px;
  background-color: rbga(#fff, 0.5);
  border: none;
  border-bottom: 3px solid transparent;
  /* HINT: Transparent because we will give it a color when user focuses on it. */
  width: 90%;
  display: block;
  transition: all 0.3s;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .form__input {
    width: 100%;
  }
}
.form__input:focus {
  /* HINT: Remove borders when focusing on an element. */
  outline: none;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.1);
  /* HINT: For accessability: When user moves around with a keyboard, you should give some box-shadow. */
  border-bottom: 3px solid #55c57a;
}
.form__input:focus:invalid {
  border-bottom: 3px solid #ff7730;
}
.form__input::-webkit-input-placeholder {
  /* HINT: To style the placeholder */
  color: #999;
}
.form__label {
  font-size: 1.2rem;
  font-weight: 700;
  margin-left: 2rem;
  margin-top: 0.7rem;
  display: block;
  transition: all 0.3s;
}
.form__input:placeholder-shown + .form__label {
  opacity: 0;
  visibility: hidden;
  transform: translateY(-4rem);
}
.form__radio-group {
  width: 49%;
  display: inline-block;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .form__radio-group {
    width: 100%;
    margin-bottom: 2rem;
  }
}
.form__radio-input {
  display: none;
}
.form__radio-label {
  font-size: 1.6rem;
  cursor: pointer;
  position: relative;
  padding-left: 4.5rem;
}
.form__radio-button {
  height: 3rem;
  width: 3rem;
  border: 5px solid #55c57a;
  border-radius: 50%;
  display: inline-block;
  position: absolute;
  left: 0;
  top: -0.4rem;
}
.form__radio-button::after {
  content: "";
  display: block;
  height: 1.3rem;
  width: 1.3rem;
  border-radius: 50%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: #55c57a;
  opacity: 0;
  transition: opacity 0.2s;
}
.form__radio-input:checked ~ .form__radio-label .form__radio-button::after {
  opacity: 1;
}

.popup {
  height: 100vh;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  background-color: rgba(0, 0, 0, 0.8);
  z-index: 9999;
  /* In order to animate the popup, don't use display: none; */
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s;
  /*  This will check if the browser supports this feature or not
        if yes it will apply the effects */
  /* when clicking an anchor with target #popup, this will show the popup */
  /* when popup element popup on screen make some animation to __content
    it will popup to user from the middle of the screen */
  /* we need the two boxes to have the same height, we can use float but the right box will occupy only the actual conent height
        so we need a way to make the two boxes the same height and center the content vertically 
        we are going to simulate a table by setting display: table-cell; on the box and the parent element .popup__content will be display: table; 
        to verically align the content, we'll use vertical-align: middle; on boxes */
}
@supports (-webkit-backdrop-filter: blur(10px)) or (backdrop-filter: blur(10px)) {
  .popup {
    /*  Apply filter to what's behind a selected element
        bluring the popup background instead of making it dark 
        not working in chrome only works on safari */
    -webkit-backdrop-filter: blur(10px);
    backdrop-filter: blur(10px);
    background-color: rgba(0, 0, 0, 0.3);
  }
}
.popup:target {
  opacity: 1;
  visibility: visible;
}
.popup:target .popup__content {
  opacity: 1;
  transform: translate(-50%, -50%) scale(1);
}
.popup__close:link,
.popup__close:visited {
  color: #777;
  position: absolute;
  /* it will be positioned to first positioned parent which is popup */
  top: 2.5rem;
  right: 2.5rem;
  font-size: 3rem;
  text-decoration: none;
  display: inline-block;
  transition: all 0.3s;
  line-height: 1;
}
.popup__close:hover {
  color: #55c57a;
}
.popup__content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 75%;
  background-color: #fff;
  box-shadow: 0 2rem 4rem rgba(0, 0, 0, 0.2);
  border-radius: 3px;
  display: flex;
  overflow: hidden;
  /* because the image overflowen */
  opacity: 0;
  transform: translate(-50%, -50%) scale(0.25);
  transition: all 0.4s 0.2s;
  /* delay the transition by .2s*/
}
.popup__left {
  width: 33.333333%;
  display: table-cell;
  display: flex;
  flex-direction: column;
  justify-content: center;
  padding-left: 3rem;
  visibility: visible;
}
@media only screen and (max-width: 56.25em) {
  .popup__left {
    display: none;
    visibility: hidden;
  }
}
.popup__right {
  width: 66.6666667%;
  display: table-cell;
  vertical-align: middle;
  padding: 3rem 5rem;
}
@media only screen and (max-width: 56.25em) {
  .popup__right {
    width: 100%;
  }
}
@media only screen and (max-width: 37.5em) {
  .popup__right {
    overflow-y: scroll;
    height: 70vh;
    padding: 2rem 2.5rem;
  }
}
.popup__img {
  display: block;
  width: 100%;
  margin-bottom: 20px;
}
.popup__img:not(:last-child) {
  margin-bottom: 20px;
}
.popup__text {
  font-size: 1.4rem;
  margin-bottom: 4rem;
  /* this will split the text into two columns */
  -moz-column-count: 2;
  column-count: 2;
  /* space between columns */
  -moz-column-gap: 4rem;
  column-gap: 4rem;
  -moz-column-rule: 1px solid #eee;
  column-rule: 1px solid #eee;
  /* this is for hyphenation 
        in order this to work you have to set the html language to en*/
  -moz-hyphens: auto;
  -ms-hyphens: auto;
  -webkit-hyphens: auto;
  hyphens: auto;
}
@media only screen and (max-width: 37.5em) {
  .popup__text {
    column-count: 1;
    column-gap: 0;
    margin-bottom: 1rem;
  }
}

.row {
  /* difference between max-width and width is max-width it will take 100% of the view port if the width is less
    than 1140px, so if the viewport is small it will adopt automatically */
  max-width: 114rem;
  margin: 0 auto;
  /* for media queries */
  /* we make variable $gutter-horizontal so for future projects we can play with the value as we want */
}
@media only screen and (max-width: 56.25em) {
  .row {
    max-width: 50rem;
    padding: 0 3rem;
  }
}
.row:not(:last-child) {
  margin-bottom: 8rem;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .row:not(:last-child) {
    margin-bottom: 6rem;
  }
}
.row::after {
  content: "";
  display: table;
  /* standard version of clearfix */
  clear: both;
}
.row [class^="col-"] {
  float: left;
  /* for media queries */
}
.row [class^="col-"]:not(:last-child) {
  margin-right: 2rem;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .row [class^="col-"]:not(:last-child) {
    margin-right: 0;
    margin-bottom: 6rem;
  }
}
@media only screen and (max-width: 56.25em) {
  .row [class^="col-"] {
    width: 100% !important;
  }
}
.row .col-1-of-2 {
  /* allow calculations where you can mix units 
    calc is a css function, in order to use sass variables you need to wrap the variable between hash{} 
    In sass we can do operations of the same unit, we can not mix units */
  width: calc((100% - 2rem) / 2);
}
.row .col-1-of-3 {
  width: calc((100% - 2 * 2rem) / 3);
}
.row .col-2-of-3 {
  /* == 2 'col-1-of-3' + $gutter-horizontal */
  width: calc(2 * ((100% - 2 * 2rem) / 3) + 2rem);
}
.row .col-1-of-4 {
  width: calc((100% - 3 * 2rem) / 4);
}
.row .col-2-of-4 {
  width: calc(2 * ((100% - 3 * 2rem) / 4) + 2rem);
}
.row .col-3-of-4 {
  width: calc(3 * ((100% - 3 * 2rem) / 4) + (2 * 2rem));
}

.header {
  height: 85vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.801)
    ),
    url(../img/hero-small.jpg);
  background-size: cover;
  background-position: top;
  /* it ensures whatever the viewport size, image will always at top of the container */
  /* for media queries */
  /* responsive images in css
        dpi (dot per inch)
        192 because this the resolution of apple retina screen 
        if resolution is higher than 192 (we have 2x screen - DPR:2.0) then show the big image (../img/hero.jpg)
        
        and (min-width: 600px) >> because in the mobile view (which is less than 600) almost the density is 2x 
        so no need to download high resolution image
        
        $color-secondary-light  instead of $color-primary-light for testing purpose
    */
  /* we making parent relative because, we need to position the child .log-box */
  position: relative;
}
@supports (clip-path: polygon(0 0)) or (-webkit-clip-path: polygon(0 0)) {
  .header {
    /* specify a polygon in which the image or the element will still be visible */
    /* nice website you can use, www.bennettfeely.com/clippy/ */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    /*75vh means 75 percent of the viewport hieght */
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    height: 95vh;
  }
}
@media only screen and (min-resolution: 192dpi) and (min-width: 37.5em),
  only screen and (-webkit-min-device-pixel-ratio: 2) and (min-width: 37.5em),
  only screen and (min-width: 125em) {
  .header {
    background-image: linear-gradient(
        to right bottom,
        rgba(255, 185, 0, 0.8),
        rgba(255, 119, 48, 0.801)
      ),
      url(../img/hero.jpg);
  }
}
@media only screen and (max-width: 37.5em) {
  .header {
    clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
    /*75vh means 75 percent of the viewport height */
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
  }
}
.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}
.header__logo {
  height: 3.5rem;
}
.header__text-box {
  position: absolute;
  top: 40%;
  /* relation to the parent element */
  left: 50%;
  /* relation to the parent element */
  transform: translate(-50%, -50%);
  /* relation to the element itself */
  text-align: center;
  /* to centre the button inside */
}

.footer {
  background-color: #333;
  padding: 10rem 0;
  font-size: 1.4rem;
  color: #f7f7f7;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .footer {
    padding: 8rem 0;
  }
}
.footer__logo-box {
  text-align: center;
  margin-bottom: 8rem;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .footer__logo-box {
    margin-bottom: 6rem;
  }
}
.footer__logo {
  width: 15rem;
  height: auto;
}
.footer__navigation {
  border-top: 1px solid #777;
  padding-top: 2rem;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .footer__navigation {
    width: 100%;
    text-align: center;
  }
}
.footer__list {
  list-style: none;
}
.footer__item {
  display: inline-block;
}
.footer__item:not(:last-child) {
  margin-right: 1.5rem;
}
.footer__link:link,
.footer__link:visited {
  color: #f7f7f7;
  background-color: #333;
  text-decoration: none;
  text-transform: uppercase;
  display: inline-block;
  transition: transform 0.2s, box-shadow 0.2s, color 0.2s;
}
.footer__link:hover,
.footer__link:active {
  color: #55c57a;
  transform: rotate(5deg) scale(1.3);
}
.footer__copyright {
  border-top: 1px solid #777;
  padding-top: 2rem;
  width: 80%;
  float: right;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .footer__copyright {
    width: 100%;
    float: none;
  }
}

.navigation {
  /* this is for the hamburger button with white color */
  /* this is for the fullscreen green background */
}
.navigation__checkbox {
  display: none;
}
.navigation__button {
  background-color: #fff;
  height: 7rem;
  width: 7rem;
  position: fixed;
  top: 6rem;
  right: 6rem;
  border-radius: 50%;
  z-index: 2000;
  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.1);
  text-align: center;
  cursor: pointer;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .navigation__button {
    top: 4rem;
    right: 4rem;
  }
}
@media only screen and (max-width: 37.5em) {
  .navigation__button {
    top: 2.5rem;
    right: 2.5rem;
  }
}
.navigation__background {
  height: 6rem;
  width: 6rem;
  border-radius: 50%;
  position: fixed;
  top: 6.5rem;
  right: 6.5rem;
  /* linear-gradient goes from one side to another, while radial gradient starts at the middle 
            of an element then goes to all other directions */
  background-image: radial-gradient(#7ed56f, #28b485);
  z-index: 1000;
  transition: transform 0.8s cubic-bezier(0.86, 0, 0.07, 1);
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .navigation__background {
    top: 4.5rem;
    right: 4.5rem;
  }
}
@media only screen and (max-width: 37.5em) {
  .navigation__background {
    top: 3rem;
    right: 3rem;
  }
}
.navigation__nav {
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1500;
  opacity: 0;
  width: 0;
  /* There are bunch of other transition timing functions like easein, easeout, easeinout 
         cubic-bezier https://easings.net/  cubic-bezier.com */
  transition: all 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}
.navigation__list {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  list-style: none;
  text-align: center;
  width: 100%;
}
.navigation__item {
  margin: 1rem;
}
.navigation__link:link,
.navigation__link:visited {
  display: inline-block;
  /* so the padding will be applied the way it should */
  font-size: 3rem;
  font-weight: 300;
  padding: 1rem 2rem;
  color: #fff;
  text-decoration: none;
  text-transform: uppercase;
  /* Trick to set background color to an element, then when we hover over it will come back to background-position: 100% */
  background-image: linear-gradient(
    120deg,
    transparent 0%,
    transparent 50%,
    #fff 50%
  );
  background-size: 220%;
  transition: all 0.4s;
  display: none;
  opacity: 0;
}
.navigation__link:link span,
.navigation__link:visited span {
  margin-right: 1.5rem;
  display: inline-block;
}
.navigation__link:hover,
.navigation__link:active {
  background-position: 100%;
  color: #55c57a;
  transform: translateX(1rem);
}
.navigation__checkbox:checked ~ .navigation__background {
  transform: scale(80);
}
.navigation__checkbox:checked ~ .navigation__nav {
  opacity: 1;
  width: 100%;
}
.navigation__checkbox:checked
  ~ .navigation__nav
  .navigation__item
  .navigation__link {
  opacity: 1;
  display: inline-block;
}
.navigation__icon {
  position: relative;
  margin-top: 3.5rem;
  /* transform-origin: left; it may be helpful when we rotate somthing
                                     it will start rotating from the left position */
}
.navigation__icon,
.navigation__icon::before,
.navigation__icon::after {
  width: 3rem;
  height: 2px;
  background-color: #333;
  display: inline-block;
}
.navigation__icon::before,
.navigation__icon::after {
  content: "";
  position: absolute;
  left: 0;
  transition: all 0.2s;
}
.navigation__icon::before {
  top: -0.8rem;
}
.navigation__icon::after {
  top: 0.8rem;
}
.navigation__button:hover .navigation__icon::before {
  top: -1rem;
}
.navigation__button:hover .navigation__icon::after {
  top: 1rem;
}
.navigation__checkbox:checked + .navigation__button .navigation__icon {
  background-color: transparent;
}
.navigation__checkbox:checked + .navigation__button .navigation__icon::before {
  top: 0;
  transform: rotate(135deg);
}
.navigation__checkbox:checked + .navigation__button .navigation__icon::after {
  top: 0;
  transform: rotate(-135deg);
}

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh;
  /* in header section 95vh - 75vh (clippath) = 20vh*/
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .section-about {
    padding: 20rem 0;
  }
}

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(
      to right bottom,
      rgba(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.801)
    ),
    url(../img/nat-4.jpg);
  /* HINT: Skew the section -7deg, then we skew the direct children the opposite way 7deg */
  transform: skewY(-7deg);
  /* HINT: Select every element which is a direct child of section-feature and skew it in the y ditection 7deg */
  margin-top: -10rem;
  /* for media queries */
}
.section-features > * {
  transform: skewY(7deg);
}
@media only screen and (max-width: 56.25em) {
  .section-features {
    padding: 10rem 0;
  }
}

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  margin-top: -8rem;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .section-tours {
    padding: 20rem 0 10rem 0;
  }
}

.section-stories {
  padding: 15rem 0;
  position: relative;
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .section-stories {
    padding: 10rem 0;
  }
}

.section-book {
  padding: 15rem 0;
  background-image: linear-gradient(to right bottom, #7ed56f, #28b485);
  /* for media queries */
}
@media only screen and (max-width: 56.25em) {
  .section-book {
    padding: 10rem 0;
  }
}

.book {
  /* HINT: Technique to use the color gradient with background image instead of using the clip-path property
            - Rotate 105deg
            - Give it white color with 90% obacity from 0 to half of the width
            - The other 50% will be transparent */
  background-image: linear-gradient(
      105deg,
      rgba(255, 255, 255, 0.9) 0%,
      rgba(255, 255, 255, 0.9) 50%,
      transparent 50%
    ),
    url(../img/nat-10.jpg);
  background-size: 100%;
  /* HINT: Similar to cover but they are not really the same
    100% it will make sure the item fits its container in the x direction */
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  /* delete as it was for testing */
  /* for media queries */
}
@media only screen and (max-width: 75em) {
  .book {
    background-image: linear-gradient(
        105deg,
        rgba(255, 255, 255, 0.9) 0%,
        rgba(255, 255, 255, 0.9) 65%,
        transparent 65%
      ),
      url(../img/nat-10.jpg);
    /* it will adopt the width and height automatically */
    background-size: cover;
  }
}
@media only screen and (max-width: 56.25em) {
  .book {
    background-image: linear-gradient(
        to right,
        rgba(255, 255, 255, 0.9) 0%,
        rgba(255, 255, 255, 0.9) 100%
      ),
      url(../img/nat-10.jpg);
  }
}
.book__form {
  width: 50%;
  padding: 6rem;
  /* for media queries */
}
@media only screen and (max-width: 75em) {
  .book__form {
    width: 65%;
  }
}
@media only screen and (max-width: 56.25em) {
  .book__form {
    width: 100%;
  }
}
